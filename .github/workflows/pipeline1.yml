name: DevSecOps Pipeline - Example Voting App

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  # ====================
  # 1. Build & Tests (VM1 - Runner)
  # ====================
  build-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Images
        run: docker compose -f docker-compose.yml build

  # ====================
  # 2. Analyse statique (SonarQube SAST)
  # ====================
  sonar-analysis:
    runs-on: self-hosted
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=${{ secrets.SONAR_HOST_URL }} \
            -e SONAR_LOGIN=${{ secrets.SONAR_TOKEN }} \
            -v $(pwd):/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            
          - name: Check Quality Gate
            run: |
              STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=voting-app" \
                | jq -r '.projectStatus.status')
              
              if [ "$STATUS" != "OK" ]; then
                echo "ERREUR: Quality Gate échoué - Status: $STATUS"
                exit 1
              fi
              echo "Quality Gate réussi!"
          
          - name: Notify on SAST failure
            if: failure()
            uses: 8398a7/action-slack@v3
            with:
              status: failure
              text: "Quality Gate SonarQube échoué - ${{ github.repository }}"
              webhook_url: ${{ secrets.SLACK_WEBHOOK }}        

  # ====================
  # 3. Analyse de composition logicielle (SCA - Snyk)
  # ====================
  # sca-scan:
  #   name: SCA - Dependency Analysis
  #   runs-on: [self-hosted, linux]
  #   needs: build-test
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Run Snyk dependency scan
  #     uses: snyk/actions/node@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --severity-threshold=high --file=vote/package.json
  #       command: test
    
  #   - name: Upload Snyk report
  #     if: always()
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: snyk-report
  #       path: snyk-report.json
    
  #   # Arrêt en cas de vulnérabilités critiques
  #   - name: Check for critical vulnerabilities
  #     run: |
  #       if [ -f "snyk-report.json" ]; then
  #         CRITICAL_COUNT=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' snyk-report.json || echo "0")
  #         if [ "$CRITICAL_COUNT" -gt "0" ]; then
  #           echo "ERREUR: $CRITICAL_COUNT vulnérabilités critiques détectées!"
  #           exit 1
  #         fi
  #       fi
  
  sca-scan:
    runs-on: self-hosted
    needs: build-test
    steps:
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db

      - name: Trivy FS Scan
        run: |
          docker run --rm -v $(pwd):/src aquasec/trivy fs /src

  # ====================
  # 3. Packaging & Scan image
  # ====================
  package-and-scan:
    runs-on: self-hosted
    needs: [sonar-analysis, sca-scan]
    steps:
      - name: Build Docker image
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/app:${{ github.sha }}"
          docker build -t "$IMAGE" ./vote
          docker push "$IMAGE"

      - name: Scan Dockerfile & Image - Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKERHUB_USERNAME }}/app:${{ github.sha }}"
          severity: HIGH,CRITICAL
  
  # ====================
  # 4. Déploiement Preprod (VM2)
  # ====================
  deploy-preprod:
    runs-on: self-hosted
    needs: package-and-scan
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PREPROD_KEY }}

      - name: Deploy on Preprod
        run: |
          ssh rocky@192.168.1.66 "
            docker pull memecpux/app:${GITHUB_SHA}
            docker stop app || true && docker rm app || true
            docker run -d --name app -p 8080:80 memecpux/app:${GITHUB_SHA}"

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "Déploiement staging réussi - ${{ secrets.PREPROD_HOST }}"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
            
   #   - name: Deploy Docker Stack
   #     run: ssh rocky@192.168.1.66 "docker stack deploy -c /home/rocky/docker-compose.yml votingapp-preprod"

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: OWASP ZAP Baseline Scan
      #   uses: zaproxy/action-baseline@v0.7.0
      #   with:
      #     target: ${{ env.STAGING_URL }}
      #     rules_file_name: '.zap/rules.tsv'
      #     cmd_options: '-a -j -m 10 -T 60'
      
      # - name: Upload ZAP report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: report_html.html

      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm -v ${{ github.workspace }}:/zap/wrk -t zaproxy/zap-stable \
            zap-baseline.py -t http://192.168.224.126:8080 -J report.json -I

  # ====================
  # 5. Validation manuelle
  # ====================
  # manual-approval:
  #   runs-on: self-hosted
  #   needs: deploy-preprod
  #   steps:
  #     - name: Wait for manual approval
  #       uses: hmarr/auto-approve-action@v3
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
  #         review-message: "Validation manuelle !?"

  # ====================
  # 6. Déploiement Production (VM3)
  # ====================
  deploy-prod:
    runs-on: self-hosted
    # needs: manual-approval
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PROD_KEY }}
      
      - name: Deploy Docker Stack
        run: |
          ssh rocky@192.168.1.67 "
            cd /opt/example-voting-app
            git pull origin main
            docker compose up -d"

  # ====================
  # 7. Supervision Monitoring (VM1)
  # ====================
  monitoring:
    runs-on: self-hosted
    needs: deploy-prod
    steps:
      - name: Verify Prometheus
        run: curl -s http://192.168.1.65:9090/api/v1/status/config
      - name: Verify Grafana
        run: curl -s http://192.168.1.65:3000/api/health
