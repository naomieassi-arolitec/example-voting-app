name: DevSecOps Pipeline - Example Voting App

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  # ====================
  # 1. Build & Tests (VM1 - Runner)
  # ====================
  build-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Images
        run: docker compose -f docker-compose.yml build

  # ====================
  # 2. Analyse statique (SonarQube SAST)
  # ====================
  sonar-analysis:
    runs-on: self-hosted
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=${{ secrets.SONAR_HOST_URL }} \
            -e SONAR_LOGIN=${{ secrets.SONAR_TOKEN }} \
            -v $(pwd):/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # ====================
  # 3. Packaging & Scan image
  # ====================
  package-and-scan:
    runs-on: self-hosted
    needs: sonar-analysis
    steps:
      - name: Build Docker Images
        run: docker compose -f docker-compose.yml build

      - name: Trivy Image Scan
        run: |
          docker images -q | xargs -n1 -I {} docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image {}

      - name: Push Images to DockerHub
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker compose -f docker-compose.yml push

  # ====================
  # 4. Déploiement Préprod (VM2)
  # ====================
  deploy-preprod:
    runs-on: self-hosted
    needs: package-and-scan
    steps:
      - name: Deploy Preprod via Swarm
        run: ssh user@vm2 "docker stack deploy -c /home/user/docker-compose-preprod.yml votingapp-preprod"

      - name: OWASP ZAP Scan
        run: docker run --rm -t owasp/zap2docker-stable zap-baseline.py -t http://vm2:8081

  # ====================
  # 5. Validation manuelle
  # ====================
  manual-approval:
    runs-on: self-hosted
    needs: deploy-preprod
    steps:
      - name: Wait for manual approval
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ====================
  # 6. Déploiement Production (VM3)
  # ====================
  deploy-prod:
    runs-on: self-hosted
    needs: manual-approval
    steps:
      - name: Deploy Production via Swarm
        run: ssh user@vm3 "docker stack deploy -c /home/user/docker-compose-prod.yml votingapp-prod"

  # ====================
  # 7. Supervision Monitoring (VM1)
  # ====================
  monitoring:
    runs-on: self-hosted
    needs: deploy-prod
    steps:
      - name: Verify Prometheus
        run: curl -s http://localhost:9090/api/v1/status/config
      - name: Verify Grafana
        run: curl -s http://localhost:3000/api/health
